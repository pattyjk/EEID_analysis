ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
ggplot(frog_sum, aes(Trt_Bd, mean))+
geom_bar(stat="identity", fill=Bd)+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
frog_sum$Bd
ggplot(frog_sum, aes(Trt_Bd, mean))+
geom_bar(stat="identity", fill=as.factor(Bd))+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
ggplot(frog_sum, aes(Trt_Bd, mean))+
geom_bar(stat="identity", fill=frog_sum$Bd)+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
ggplot(frog_sum, aes(Trt_Bd, mean))+
geom_bar(stat="identity")+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
ggplot(frog_sum, aes(Trt_Bd, mean, fill=Bd))+
geom_bar(stat="identity")+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
View(frog_sum)
ggplot(tibiasvl2, aes(group=Trt_Bd, fill=Bd, y=tib.svl, x=Trt_Bd)) +
geom_boxplot(outlier.shape = NA)+
geom_point(shape=1, stroke = 1, size = 1.7, position=position_jitter(width=0.2), aes(colour=Bd))+
labs(x="Treatment", y="Tibia:SVL")+
theme_classic()+
guides(guides=NULL)+
theme(axis.line=element_line(color = "gray"), axis.ticks = element_line(color = "gray"),
axis.title.x.bottom = element_text(size=12, colour="black"), axis.title.x = element_blank(),
axis.text.y = element_text(size = 12, colour="black"), legend.title = "Bd",
plot.tag = element_text(size = 20), strip.text.x = element_text(size = 12))
ggplot(tibiasvl2, aes(group=Trt_Bd, fill=Bd, y=tib.svl, x=Trt_Bd)) +
geom_boxplot(outlier.shape = NA)+
geom_point(shape=1, stroke = 1, size = 1.7, position=position_jitter(width=0.2), aes(colour=Bd))+
labs(x="Treatment", y="Tibia:SVL")
View(frog_sum)
frog_sum<-ddply(tibiasvl2, c("Trt_Bd", "Bd"), summarize, mean=mean(tib.svl), sd=sd(tib.svl), n=length(tib.svl), se=sd/n)
View(frog_sum)
tibiasvl2 <- read.csv("/Users/patty/Desktop/tibiasvl2.csv")
frog_sum<-ddply(tibiasvl2, c("Trt_Bd", "Bd"), summarize, mean=mean(tib.svl), sd=sd(tib.svl), n=length(tib.svl), se=sd/n)
ggplot(frog_sum, aes(Trt_Bd, mean, fill=Bd))+
geom_bar(stat="identity")+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
View(tibiasvl2)
tibiasvl2 <- read.csv("/Users/patty/Desktop/tibiasvl2.csv")
frog_sum<-ddply(tibiasvl2, c("Trt_Bd", "Bd"), summarize, mean=mean(tib.svl), sd=sd(tib.svl), n=length(tib.svl), se=sd/n)
View(tibiasvl2)
frog_sum<-ddply(tibiasvl2, c("Trt_Bd", "Bd"), summarize, mean=mean(tib.svl), sd=sd(tib.svl), n=length(tib.svl), se=sd/n)
View(frog_sum)
#remove NA
tibiasvl2 <- tibiasvl2[is.na(tibiasvl2$tib.svl),]
#summarize data
frog_sum<-ddply(tibiasvl2, c("Trt_Bd", "Bd"), summarize, mean=mean(tib.svl), sd=sd(tib.svl), n=length(tib.svl), se=sd/n)
View(frog_sum)
#remove NA
tibiasvl2 <- tibiasvl2[-is.na(tibiasvl2$tib.svl),]
#summarize data
frog_sum<-ddply(tibiasvl2, c("Trt_Bd", "Bd"), summarize, mean=mean(tib.svl), sd=sd(tib.svl), n=length(tib.svl), se=sd/n)
ggplot(frog_sum, aes(Trt_Bd, mean, fill=Bd))+
geom_bar(stat="identity")+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
tibiasvl2 <- is.na(tibiasvl2$tib.svl)
tibiasvl2
tibiasvl2 <- read.csv("/Users/patty/Desktop/tibiasvl2.csv")
#remove NA
tibiasvl2 <- is.na(tibiasvl2$tib.svl)
tibiasvl2
#read data
tibiasvl2 <- read.csv("/Users/patty/Desktop/tibiasvl2.csv")
#remove NA
tibiasvl2 <-tibiasvl2[!is.na(tibiasvl2$tib.svl),]
frog_sum<-ddply(tibiasvl2, c("Trt_Bd", "Bd"), summarize, mean=mean(tib.svl), sd=sd(tib.svl), n=length(tib.svl), se=sd/n)
#plot data
ggplot(frog_sum, aes(Trt_Bd, mean, fill=Bd))+
geom_bar(stat="identity")+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
ggplot(frog_sum, aes(as.factor(Trt_Bd), mean, fill=as.factor(Bd)))+
geom_bar(stat="identity")+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+se, ymin=mean-se, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
View(frog_sum)
ggplot(frog_sum, aes(as.factor(Trt_Bd), mean, fill=as.factor(Bd)))+
geom_bar(stat="identity")+
theme_bw()+
xlab("Treatment")+
ylab("Tibia:SVL")+
geom_errorbar(aes(ymax=mean+sd, ymin=mean-sd, width=0.2), stat="identity")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))
ggplot(tibiasvl2, aes(group=Trt_Bd, fill=Bd, y=tib.svl, x=Trt_Bd)) +
geom_boxplot(outlier.shape = NA)+
geom_point(shape=1, stroke = 1, size = 1.7, position=position_jitter(width=0.2), aes(colour=Bd))+
labs(x="Treatment", y="Tibia:SVL")+
theme_classic()+
guides(guides=NULL)+
theme(axis.line=element_line(color = "gray"), axis.ticks = element_line(color = "gray"),
axis.title.x.bottom = element_text(size=12, colour="black"), axis.title.x = element_blank(),
axis.text.y = element_text(size = 12, colour="black"), legend.title = "Bd",
plot.tag = element_text(size = 20), strip.text.x = element_text(size = 12))
ggplot(tibiasvl2, aes(group=Trt_Bd, fill=Bd, y=tib.svl, x=Trt_Bd)) +
geom_boxplot(outlier.shape = NA)+
geom_point(shape=1, stroke = 1, size = 1.7, position=position_jitter(width=0.2), aes(colour=Bd))+
labs(x="Treatment", y="Tibia:SVL")
require(XML)
library(plyr)
library(dplyr)
library(DT)
library(shiny)
server <- function(input, output, session){
#uncomment lines to add the custom DB
#custom_db <- c("FrogDB")
#custom_db_path <- c("./FrogToTheMax")
blastresults <- eventReactive(input$blast, {
#gather input and set up temp file
query <- input$query
tmp <- tempfile(fileext = ".fna")
#if else chooses the right database
if (input$db == custom_db){
db <- custom_db_path
remote <- c("")
} else {
db <- c("nt")
# add remote option for nt since we don't have a local copy, can make a local copy if necessary
remote <- c("-remote")
}
#this makes sure the FASTA file is formatted properly
if (startsWith(query, ">")){
writeLines(query, tmp)
} else {
writeLines(paste0(">Query\n", query), tmp)
}
#"-perc_identity", input$perc_ident,
#calls the BLASTman, not batman :(
data <- system2("/Program Files/NCBI/blast-BLAST_VERSION+/bin/blastn", args=c(paste("-query", tmp, "-db", db, "-outfmt 6 -max_hsps 1 -max_target_seqs 10", remote)))
})}
#Now to parse the results...
parsedresults <- reactive({
if (is.null(blastresults())){}
else {
xmltop = xmlRoot(blastresults())
#the first chunk is for multi-fastas
results <- xpathApply(blastresults(), '//Iteration',function(row){
query_ID <- getNodeSet(row, 'Iteration_query-def') %>% sapply(., xmlValue)
hit_IDs <- getNodeSet(row, 'Iteration_hits//Hit//Hit_id') %>% sapply(., xmlValue)
hit_length <- getNodeSet(row, 'Iteration_hits//Hit//Hit_len') %>% sapply(., xmlValue)
bitscore <- getNodeSet(row, 'Iteration_hits//Hit//Hit_hsps//Hsp//Hsp_bit-score') %>% sapply(., xmlValue)
eval <- getNodeSet(row, 'Iteration_hits//Hit//Hit_hsps//Hsp//Hsp_evalue') %>% sapply(., xmlValue)
cbind(query_ID,hit_IDs,hit_length,bitscore,eval)
})
#this ensures that NAs get added for no hits
results <-  rbind.fill(lapply(results,function(y){as.data.frame((y),stringsAsFactors=FALSE)}))
}
})
#makes a data table
output$blastResults <- renderDataTable({
if (is.null(blastresults())){
} else {
parsedresults()
}
})
library(BacDive)
library(plyr)
library(dplyr)
library(tidyverse)
#read in list of all species on BacDive (from downloads section)
bacdiv_sp<-read.csv("./Github/advsearch_bacdive_2022-12-13.csv", header=T)
#connect to bacdive
bacdiv<-open_bacdive('patrick.kearns@umb.edu', 'Sebbyisanebby1@3')
print(bacdiv)
#test bacdiv out on one species just in case
test<-as.data.frame(BacDive::fetch(bacdiv, bacdiv_sp[1,1]))
#all BacDive data
#first split data into blocks of 100 (that's the maximum)
#will give error, but that cool because the dataset isn't perfectly dividable by 100
d <- split(bacdiv_sp,rep(1:922,each=100))
#funtion to get the information for all IDs in the dataframe loaded above
#can take a while if a lot of IDs (~5 min on Woodhams lab Mac)
d_bacdiv<-lapply(d, function(x) BacDive::fetch(bacdiv, x$ID))
library(shinythemes)
library(DT)
library(shiny)
#define custom DB
custom_db <- c("FrogDB")
#create the UI
ui <- fluidPage(theme = shinytheme("cerulean"),
tagList(
tags$head(
tags$link(rel="stylesheet", type="text/css",href="style.css"),
tags$script(type="text/javascript", src = "busy.js")
)
),
#This block gives us all the inputs:
mainPanel(
headerPanel('Frog BLAST V1'),
textAreaInput('query', 'Input sequence:', value = "", placeholder = "", width = "600px", height="200px"),
selectInput("db", "Database:", choices=c(custom_db,"nt"), width="120px"),
div(style="display:inline-block",
selectInput("perc_ident", "Percent Ident:", choices=c(100,97, 95), width="120px")),
actionButton("blast", "BLAST!")
),
#this snippet generates a progress indicator for long BLASTs...BLASTing...BLASTer?
div(class = "busy",
p("Beep boop beep...sciencing in progress.."),
img(src="https://i.stack.imgur.com/8puiO.gif", height = 100, width = 100, align = "center")
),
#Basic results output
mainPanel(
h4("Results"),
DT::dataTableOutput("blastResults")
)
)
shinyApp(ui, server)
###elements for navigation
# Upper Left Corner NAME
# (1) Submit your microbial data
# (2) Analyze data
# (3) R package
# (4) Tutorials
# (5) GitHub
# (6) Help
ui <- fluidPage(
theme = shinytheme("sandstone"),
navbarPage(
##########
## Main page
##########
"Hippity hoppy database",
tabsetPanel(
tabPanel("Home"),
tabPanel("Submit your isolates"),
tabPanel("Analyze data"),
tabPanel("Downloads"),
tabPanel("R Tutorials"),
tabPanel("GitHub"),
tabPanel("Help")
),
mainPanel(
h4(" Database last updated 1/5/22 by a frog...ribbit"),
a(
href="https://esajournals.onlinelibrary.wiley.com/doi/abs/10.1890/14-1837.1",
"Click here to read our publication"
),
h5("This project is funded by the Smithsonian or whoever pays Molly and I."),
h5("This website allows you to:"),
tags$li("Submit your isolate data to add to the database"),
tags$li("Analyze your 16S rRNA gene sequences"),
tags$li("Learn about and install our R package"),
tags$li("Learn to use our R package through guided tutorials"),
tags$li("Access the database's GitHub repo"),
tags$li("Get help from frog experts for all your frog needs"),
h5("Please direct any questions, comments, or concerns to someone"),
a(href="https://photos.app.goo.gl/6q4bHUTgin2CMq5eA", "Click here for a picture of Pat's doggies"),
fileInput("file", h3("Upload your sequences")),
fileInput("file", h3("Upload your OTU table"))
)
)
)
library(shiny)
###elements for navigation
# Upper Left Corner NAME
# (1) Submit your microbial data
# (2) Analyze data
# (3) R package
# (4) Tutorials
# (5) GitHub
# (6) Help
library(shiny)
ui <- fluidPage(
theme = shinytheme("sandstone"),
navbarPage(
##########
## Main page
##########
"Hippity hoppy database",
tabsetPanel(
tabPanel("Home"),
tabPanel("Submit your isolates"),
tabPanel("Analyze data"),
tabPanel("Downloads"),
tabPanel("R Tutorials"),
tabPanel("GitHub"),
tabPanel("Help")
),
mainPanel(
h4(" Database last updated 1/5/22 by a frog...ribbit"),
a(
href="https://esajournals.onlinelibrary.wiley.com/doi/abs/10.1890/14-1837.1",
"Click here to read our publication"
),
h5("This project is funded by the Smithsonian or whoever pays Molly and I."),
h5("This website allows you to:"),
tags$li("Submit your isolate data to add to the database"),
tags$li("Analyze your 16S rRNA gene sequences"),
tags$li("Learn about and install our R package"),
tags$li("Learn to use our R package through guided tutorials"),
tags$li("Access the database's GitHub repo"),
tags$li("Get help from frog experts for all your frog needs"),
h5("Please direct any questions, comments, or concerns to someone"),
a(href="https://photos.app.goo.gl/6q4bHUTgin2CMq5eA", "Click here for a picture of Pat's doggies"),
fileInput("file", h3("Upload your sequences")),
fileInput("file", h3("Upload your OTU table"))
)
)
)
library(shinythemes)
###elements for navigation
# Upper Left Corner NAME
# (1) Submit your microbial data
# (2) Analyze data
# (3) R package
# (4) Tutorials
# (5) GitHub
# (6) Help
library(shiny)
library(shinythemes)
ui <- fluidPage(
theme = shinytheme("sandstone"),
navbarPage(
##########
## Main page
##########
"Hippity hoppy database",
tabsetPanel(
tabPanel("Home"),
tabPanel("Submit your isolates"),
tabPanel("Analyze data"),
tabPanel("Downloads"),
tabPanel("R Tutorials"),
tabPanel("GitHub"),
tabPanel("Help")
),
mainPanel(
h4(" Database last updated 1/5/22 by a frog...ribbit"),
a(
href="https://esajournals.onlinelibrary.wiley.com/doi/abs/10.1890/14-1837.1",
"Click here to read our publication"
),
h5("This project is funded by the Smithsonian or whoever pays Molly and I."),
h5("This website allows you to:"),
tags$li("Submit your isolate data to add to the database"),
tags$li("Analyze your 16S rRNA gene sequences"),
tags$li("Learn about and install our R package"),
tags$li("Learn to use our R package through guided tutorials"),
tags$li("Access the database's GitHub repo"),
tags$li("Get help from frog experts for all your frog needs"),
h5("Please direct any questions, comments, or concerns to someone"),
a(href="https://photos.app.goo.gl/6q4bHUTgin2CMq5eA", "Click here for a picture of Pat's doggies"),
fileInput("file", h3("Upload your sequences")),
fileInput("file", h3("Upload your OTU table"))
)
)
)
server<- function(input, output) { }
shinyApp(ui, server)
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, skip = 1, row.names=1)
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, skip = 1)
View(mothur.table)
?read.table
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)
View(mothur.table)
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-1]
View(mothur.table)
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-1,2]
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-1,3]
View(mothur.table)
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,c(-1,3)]
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-1:3]
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-1]
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-c(1,3)]
View(mothur.table)
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-c('label', 'numOtus')]
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)
View(mothur.table)
?read.delim
library(readr)
?read_delim
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-1:3]
mothur.table<-read.table("/Users/patty/Desktop/mothu.txt", header=T, row.names=2)[,-c(1:3)]
View(mothur.table)
mothur.table<-t(mothur.table)
install.packages("BiocManager")
#next install biomformat package
library(BiocManager)
source("http://bioconductor.org/biocLite.R")
biocLite("biomformat")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.16")
library(BiocManager)
source("http://bioconductor.org/biocLite.R")
biocLite("biomformat")
library(biomformat)
?read_biom()
mybiomfile<-"Github/panama_golden_frogs/table/feature-table.biom"
asv.tabl<-read_biom(mybiomfile)
View(asv.tbl)
View(asv.tabl)
asv.tabl[["rows"]]
install.packages('phyloseq')
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
BiocManager('phyloseq')
#next install phyloseq package
library(BiocManager)
BiocManager('phyloseq')
source('http://bioconductor.org/biocLite.R')
BiocManager::install("phyloseq")
library(phyloseq)
? import_biom
asv.tabl<- import_biom("Github/panama_golden_frogs/table/feature-table.biom")
View(asv.tabl)
library(devtools)
if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")
library(qiime2R)
?read_qza
asv.tabl<-read_qza("./Github/panama_golden_frogs/Run11_table-deblur.qza")
View(asv.tabl)
asv.tabl[["contents"]]
asv.tabl2<-asv.tabl$data
View(asv.tabl2)
install.packages("cooccur")
install.packages("visNetwork")
library(cooccur)
library(visNetwork)
data(finches)
co <- print(cooccur(finches, spp_names = TRUE))
View(co)
?cooccur
nodes <- data.frame(id = 1:nrow(finches),
label = rownames(finches),
color = “#606482”,
nodes <- data.frame(id = 1:nrow(finches),
label = rownames(finches),
color = “#606482”,
nodes <- data.frame(id = 1:nrow(finches),
label = rownames(finches),
color = "#606482”,
shadow = TRUE)
nodes <- data.frame(id = 1:nrow(finches),
label = rownames(finches),
color = "#606482",
shadow = TRUE)
edges <- data.frame(from = co$sp1, to = co$sp2,
color = ifelse(co$p_lt <= 0.05, "#B0B2C1", "#3C3F51"),
dashes = ifelse(co$p_lt <= 0.05, TRUE, FALSE))
visNetwork(nodes = nodes, edges = edges) %>%
visIgraphLayout(layout = “layout_with_kk”)
visNetwork(nodes = nodes, edges = edges) %>%
visIgraphLayout(layout = "layout_with_kk")
View(finches)
setwd("Github/EEID_analysis/")
otu_tbl<-read.delim("otu_table.txt", row.names=1, header=T)
View(otu_tbl)
co <- cooccur(otu_tab, spp_names = TRUE)
co <- cooccur(otu_tbl, spp_names = TRUE)
otu_tbl<-otu_tbl[1:6,]
dim(otu_tb;)
dim(otu_tbl)
co <- cooccur(otu_tbl, spp_names = TRUE)
nodes <- data.frame(id = 1:nrow(otu_tbl), label = rownames(otu_tbl), color = "#606482", shadow = TRUE)
edges <- data.frame(from = co$sp1, to = co$sp2, color = ifelse(co$p_lt <= 0.05, "#B0B2C1", "#3C3F51"), dashes = ifelse(co$p_lt <= 0.05, TRUE, FALSE))
visNetwork(nodes = nodes, edges = edges) %>% visIgraphLayout(layout = "layout_with_kk")
visNetwork(nodes = nodes, edges = edges)
otu_tbl<-otu_tbl[1:500,]
co <- cooccur(otu_tbl, spp_names = TRUE)
otu_tbl<-otu_tbl[1:100,]
co <- cooccur(otu_tbl, spp_names = TRUE)
