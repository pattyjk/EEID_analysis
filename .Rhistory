ggplot(galac, aes(Species, Galactose_mM))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
coord_flip()+
ylab("Galactose (mM)")+
xlab("")
ribspore<-read.delim("/Users/patty/OneDrive/Documents/GitHub/ribspore.txt", header=T)
library(ggplot2)
ggplot(ribspore, aes(Species, ribspore$Raw.Data..290.485.))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Month_sampled)
ggplot(ribspore, aes(Species, ribspore$Raw.Data..290.485.))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Month_sampled)
ggplot(ribspore, aes(Species, ribspore$Raw.Data..290.485.))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Month_sampled)+
coord_flip()
ggplot(ribspore, aes(Species, ribspore$Raw.Data..290.485., fill=Location))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Month_sampled)+
coord_flip()
gplot(ribspore, aes(Month_sampled, ribspore$Raw.Data..290.485., fill=Location))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Species)+
coord_flip()
ggplot(ribspore, aes(Month_sampled, ribspore$Raw.Data..290.485., fill=Location))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Species)+
coord_flip()
ribspore<-read.delim("/Users/patty/OneDrive/Documents/GitHub/ribspore.txt", header=T)
library(ggplot2)
ggplot(ribspore, aes(Month_sampled, ribspore$Raw.Data..290.485., fill=Location))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Species)+
coord_flip()
ribspore<-read.delim("/Users/patty/OneDrive/Documents/GitHub/ribspore.txt", header=T)
library(ggplot2)
ggplot(ribspore, aes(Month_sampled, ribspore$Raw.Data..290.485., fill=Location))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Species)+
coord_flip()
ribspore<-read.delim("/Users/patty/OneDrive/Documents/GitHub/ribspore.txt", header=T)
library(ggplot2)
ggplot(ribspore, aes(Month_sampled, ribspore$Raw.Data..290.485., fill=Location))+
geom_jitter()+
geom_boxplot()+
theme_bw()+
facet_wrap(~Species)+
coord_flip()+
ylab("Fluorescens")+
xlab("")
fresh_frozen_TbCl <- read.delim("~/GitHub/fresh_frozen_TbCl.txt")
View(fresh_frozen_TbCl)
library(ggplot2)
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Frozen_fluor))+
geom_point()
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
ylab("TbCl fluorescence- Fresh Samples")+
theme_bw()
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
ylab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name)
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
ylab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name)+
geom_smooth(stat='lm')
?geom_smooth
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
ylab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name)+
geom_smooth(method='lm')
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
ylab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name, scales='free')+
geom_smooth(method='lm')
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
xlab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name, scales='free')+
geom_smooth(method='lm')
fresh_frozen_TbCl <- read.delim("~/GitHub/fresh_frozen_TbCl.txt")
library(ggplot2)
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
xlab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name, scales='free')+
geom_smooth(method='lm')
fresh_frozen_TbCl <- read.delim("~/GitHub/fresh_frozen_TbCl.txt")
library(ggplot2)
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
xlab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name, scales='free')+
geom_smooth(method='lm')
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor, color=Type1))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
xlab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name, scales='free')+
geom_smooth(method='lm')
cor.test(fresh_frozen_TbCl$Fresh_fluor, fresh_frozen_TbCl$Froz_fluor, method='spearman')
fresh_frozen_TbCl$Type1
fresh_split<-split(fresh_frozen_TbCl, fresh_frozen_TbCl$Type1)
cor.test(fresh_split$Mucosome$Fresh_fluor, fresh_split$Mucosome$Froz_fluor, method='spearman')
cor.test(fresh_split$Swab$Fresh_fluor, fresh_split$Swab$Froz_fluor, method='spearman')
fresh_frozen_TbCl <- read.delim("~/GitHub/fresh_frozen_TbCl.txt")
library(ggplot2)
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor, color=Type1))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
xlab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name, scales='free')+
geom_smooth(method='lm')
fresh_split<-split(fresh_frozen_TbCl, fresh_frozen_TbCl$Type1)
cor.test(fresh_split$Mucosome$Fresh_fluor, fresh_split$Mucosome$Froz_fluor, method='spearman')
cor.test(fresh_split$Swab$Fresh_fluor, fresh_split$Swab$Froz_fluor, method='spearman')
fresh_frozen_TbCl <- read.delim("~/GitHub/fresh_frozen_TbCl.txt")
library(ggplot2)
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor, color=Type1))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
xlab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name, scales='free')+
geom_smooth(method='lm')
fresh_split<-split(fresh_frozen_TbCl, fresh_frozen_TbCl$Type1)
cor.test(fresh_split$Mucosome$Fresh_fluor, fresh_split$Mucosome$Froz_fluor, method='spearman')
cor.test(fresh_split$Swab$Fresh_fluor, fresh_split$Swab$Froz_fluor, method='spearman')
fresh_frozen_TbCl <- read.delim("~/GitHub/fresh_frozen_TbCl.txt")
library(ggplot2)
ggplot(fresh_frozen_TbCl, aes(Fresh_fluor, Froz_fluor, color=Type1))+
geom_point()+
ylab("TbCl fluorescence- Frozen Samples")+
xlab("TbCl fluorescence- Fresh Samples")+
theme_bw()+
facet_wrap(~Common_name, scales='free')+
geom_smooth(method='lm')
fresh_split<-split(fresh_frozen_TbCl, fresh_frozen_TbCl$Type1)
cor.test(fresh_split$Mucosome$Fresh_fluor, fresh_split$Mucosome$Froz_fluor, method='spearman')
cor.test(fresh_split$Swab$Fresh_fluor, fresh_split$Swab$Froz_fluor, method='spearman')
fluor_time<-read.delim("/Users/patty/OneDrive/Documents/GitHub/fluor_over_time.txt", header=T)
ggplot(fluor_time, aes(as.factor(Time), Fluor, color=Sample_type))+
geom_boxplot()+
facet_wrap(~Common_name)+
ylab("Fluorescens")+
xlab("Time (hrs)")
fluor_time<-read.delim("/Users/patty/OneDrive/Documents/GitHub/fluor_over_time.txt", header=T)
ggplot(fluor_time, aes(as.factor(Time), Fluor, color=Sample_type))+
geom_boxplot()+
facet_wrap(~Common_name)+
ylab("TbCl fluorescence")+
xlab("Time (hrs)")
ggplot(fluor_time, aes(Time, Fluor, color=Sample_type))+
geom_point()+
facet_wrap(~Common_name)+
ylab("TbCl fluorescence")+
xlab("Time (hrs)")
ggplot(fluor_time, aes(Time, Fluor, color=Sample_type))+
geom_point()+
facet_wrap(~Common_name)+
ylab("TbCl fluorescence")+
xlab("Time (hrs)")+
geom_smooth()
spores<-read.delim("spore_cfu.txt", header=T)
spores<-read.delim("/Users/patty/OneDrive/Documents/GitHub/spore_cfu.txt", header=T)
ggplot(spores, aes(Common_name, Per_spore))+
geom_boxplot()+
theme_bw()+
facet_wrap(~Method)+
coord_flip()+
ylab("Percent spore-forming bacteria")+
xlab("")
ggplot(spores, aes(Method, Per_spore))+
geom_boxplot()+
theme_bw()+
facet_wrap(~Common_name)+
coord_flip()+
ylab("Percent spore-forming bacteria")+
xlab("")
cfu <- read.delim("~/GitHub/cfu.txt")
View(cfu)
ggplot(cfu, aes(Method, cfu$CFU.ml))+
facet_wrap(~Species)+
geom_boxplot()+
theme_bw()
xlab("")+
ylab("CFU/mL")
ggplot(cfu, aes(Method, cfu$CFU.ml))+
facet_wrap(~Species, scales='free')+
geom_boxplot()+
theme_bw()
xlab("")+
ylab("CFU/mL")
ggplot(cfu, aes(Method, cfu$CFU.ml))+
facet_wrap(~Species, scales='free')+
geom_boxplot()+
theme_bw()+
xlab("")+
ylab("CFU/mL")
ggplot(cfu, aes(Method, cfu$CFU.ml))+
facet_wrap(~Species, scales='free')+
geom_boxplot()+
theme_bw()+
scale_y_log10()+
xlab("")+
ylab("CFU/mL")
cfu <- read.delim("~/GitHub/cfu.txt")
ggplot(cfu, aes(Method, cfu$CFU.ml))+
facet_wrap(~Species)+
geom_boxplot()+
theme_bw()+
scale_y_log10()+
xlab("")+
ylab("CFU/mL")
ribspore <- read.delim("~/GitHub/ribspore.txt")
View(ribspore)
ribspore <- read.delim("~/GitHub/ribspore.txt")
ggplot(ribspore, aes(Month_sampled, Raw.Data..290.485.))+
geom_boxplot()+
facet_wrap(~Species)+
theme_bw()
ggplot(ribspore, aes(Month_sampled, Raw.Data..290.485., fill=Location))+
geom_boxplot()+
facet_wrap(~Species)+
theme_bw()
ggplot(ribspore, aes(Month_sampled, Raw.Data..290.485., fill=Location))+
geom_boxplot()+
facet_wrap(~Species)+
theme_bw()+
ylab("TbCl fluorescence")+
xlab("Month Sampled")
cfu <- read.delim("~/GitHub/cfu.txt")
ggplot(cfu, aes(Method, cfu$CFU.ml))+
facet_wrap(~Species)+
geom_boxplot()+
theme_bw()+
scale_y_log10()+
xlab("")+
ylab("CFU/mL")
per_viable_spores <- read.delim("~/GitHub/per_viable_spores.txt")
View(per_viable_spores)
ggplot(per_viable_spores, aes(Method, Per_viable))+
geom_boxplot()+
theme_bw()+
ylab("Percent viable spores (TbCl assay)")+
xlab("Method")+
facet_wrap(~Common_name)
ggplot(per_viable_spores, aes(Type1, Per_viable))+
geom_boxplot()+
theme_bw()+
ylab("Percent viable spores (TbCl assay)")+
xlab("Method")+
facet_wrap(~Common_name)
per_viable_spores <- read.delim("~/GitHub/per_viable_spores.txt")
ggplot(per_viable_spores, aes(Type1, Per_viable))+
geom_boxplot()+
theme_bw()+
ylab("Percent viable spores (TbCl assay)")+
xlab("Method")+
facet_wrap(~Common_name)
#read in timecourse network stats
stats<-read.delim("network_stats_timecourse.txt", header=T)
ggplot(stats, aes(Time, No_nodes, color=Cat))+
facet_wrap(~Temp)+
geom_point()+
theme_bw()+
ylab("Number of network nodes")+
xlab("Time")+
geom_smooth()
library(ggplot2)
ggplot(stats, aes(Time, No_nodes, color=Cat))+
facet_wrap(~Temp)+
geom_point()+
theme_bw()+
ylab("Number of network nodes")+
xlab("Time")+
geom_smooth()
ggplot(stats, aes(Time, Clus_coeffi, color=Cat))+
facet_wrap(~Temp)+
geom_point()+
theme_bw()+
ylab("Clustering Coefficient")+
xlab("Time")+
geom_smooth()
library("randomForest")
library("plyr")
library("rfUtilities")
library("caret")
library(ggplot2)
#read in mapping file
meta<-read.delim("Data/Metadata_NSFEEID_16SRuns_1234Merged_plusExpData.txt", header=T)
#read in KO table
s16<-read.delim("./picrust_out_norm/KO_metagenome_out/pred_metagenome_unstrat.tsv", header=T, row.names=1)
dim(s16)
otu_nonzero_counts<-apply(s16, 1, function(y) sum(length(which(y > 0))))
#plot histogram of the frequency of counts
hist(otu_nonzero_counts, breaks=100, col="grey", main="", ylab="Number of KOs", xlab="Number of Non-Zero Values")
#write function to remove rare KO
remove_rare <- function( table , cutoff_pro ) {
row2keep <- c()
cutoff <- ceiling( cutoff_pro * ncol(table) )
for ( i in 1:nrow(table) ) {
row_nonzero <- length( which( table[ i , ]  > 0 ) )
if ( row_nonzero > cutoff ) {
row2keep <- c( row2keep , i)
}
}
return( table [ row2keep , , drop=F ])
}
#use function to remove rare KO
otu_table_rare_removed <- remove_rare(table=s16, cutoff_pro=0.1)
dim(otu_table_rare_removed)
#6220 KOs by 499 samples, removed ~1000 KO that were rare (<1 percent)
#remove time points that aren't A/B (0 & 7 days post exposure)
meta_AB<-meta[which(meta$TimeWeekCat == "A" | meta$TimeWeekCat == "B"),]
meta_AB<-meta_AB[,1:2]
otu_table_rare_removed <-t(otu_table_rare_removed)
otu_table_rare_removed2 <-otu_table_rare_removed
rows_otu <-as.data.frame(row.names(otu_table_rare_removed2))
names(rows_otu)<-c("SampleID")
otu_table_rare_removed2<-cbind(otu_table_rare_removed2, rows_otu)
otu_table_rare_removed3<-merge(otu_table_rare_removed2, meta_AB, by='SampleID', all.x=F)
row.names(otu_table_rare_removed3)<-otu_table_rare_removed3$SampleID
otu_table_rare_removed3<-otu_table_rare_removed3[,-1]
otu_table_rare_removed3$BarcodeSequence=NULL
otu_table_rare_removed3<-as.data.frame(t(otu_table_rare_removed3))
#scale data
otu_table_scaled <- scale(otu_table_rare_removed3, center = TRUE, scale = TRUE)
#fix data frame to add metadata
otu_table_scaled_treatment <- data.frame(t(otu_table_scaled))
otu_table_scaled_treatment$SampleID<-row.names(otu_table_scaled_treatment)
#select only dose/temp columns from metadata
meta_sub<-as.data.frame(meta[,c(1,14)])
otu_table_scaled_treatment<-merge(otu_table_scaled_treatment, meta_sub, by="SampleID")
otu_table_scaled_treatment<-otu_table_scaled_treatment[,-1]
#set DoseTemp to factor if character, otherwise model won't run son
otu_table_scaled_treatment$DoseTemp<-as.factor(otu_table_scaled_treatment$DoseTemp)
#run model
set.seed(515)
RF_treatment_classify<-randomForest(x=otu_table_scaled_treatment[,1:(ncol(otu_table_scaled_treatment)-1)], y=otu_table_scaled_treatment[ , ncol(otu_table_scaled_treatment)] , ntree=100, importance=TRUE, proximities=TRUE)
#permutation test to test for signficance of model
RF_treatment_classify_sig<-rf.significance(x=RF_treatment_classify, xdata=otu_table_scaled_treatment[,1:(ncol(otu_table_scaled_treatment)-1)], nperm=100, ntree=100)
#identifying important features
RF_state_classify_imp <- as.data.frame(RF_treatment_classify$importance)
RF_state_classify_imp$features <- rownames( RF_state_classify_imp)
RF_state_classify_imp_sorted <- arrange( RF_state_classify_imp  , desc(MeanDecreaseAccuracy)  )
barplot(RF_state_classify_imp_sorted$MeanDecreaseAccuracy, ylab="Mean Decrease in Accuracy (Variable Importance)", main="RF Classification Variable Importance Distribution")
#top 100 features
barplot(RF_state_classify_imp_sorted[1:100,"MeanDecreaseAccuracy"], las=2, names.arg=RF_state_classify_imp_sorted[1:100,"features"] , ylab="Mean Decrease in Accuracy (Variable Importance)", main="Classification RF")
top50_feat<-as.data.frame(RF_state_classify_imp_sorted$features[1:30])
names(top50_feat)<-c("KO")
str(top50_feat)
#read in KO info, extract taxonomy
tax<-read.delim("full_kegg.txt", header=T)
#change original KO table to relative abundance
library(vegan)
s16<-decostand(otu_table_rare_removed3, method = 'total')
#check to make sure rel abund cause I got paranoia about these thangs
rowSums(s16)
#extract top 50 from KO table
s16.top50<-s16[rownames(s16) %in% top50_feat$KO,]
dim(s16.top50)
#100 by 252
s16.top50$KO<-row.names(s16.top50)
#get mean relative abundance of each OTU in the 4 cats
library(reshape2)
library(plyr)
top50_m<-melt(s16.top50)
names(top50_m)<-c("KO", "SampleID", 'Rel_abund')
top50_m<-merge(top50_m, meta, by='SampleID', all.y=F)
top50_sum<-ddply(top50_m, c('KO', "Temperature", "TimeWeekCat", "Dose"), summarize, mean=mean(Rel_abund), sd=sd(Rel_abund), n=length(Rel_abund), se=sd/n)
top50_sum<-merge(top50_sum, tax, by='KO')
```
rf_ko<-read.delim("RF_ko_delta.txt", header=T)
View(rf_ko)
library(dplyr)
library(plyr)
library(reshape2)
library(ggplot2)
#calculate correlations between dose/delta abundance
rf_split<-split(rf_ko, rf_ko$Temperature)
#write function to do it
func <- function(xx)
{
return(data.frame(COR = cor(xx$Dose, xx$delta)))
}
#calculate it
cor14<-ddply(rf_split$T14, .(KO), func)
cor22<-ddply(rf_split$T22, .(KO), func)
cor6<-ddply(rf_split$T6, .(KO), func)
#fix headers and bind
names(cor14)<-c("KO", "Cor14")
names(cor22)<-c("KO", "Cor22")
names(cor6)<-c("KO", "Cor6")
cors<-merge(cor14, cor22, by='KO')
cors<-merge(cors, cor6, by='KO')
#reshape data
cors_m<-melt(cors)
#add metadata
full_kegg<-read.delim("full_kegg.txt", header=T)
cors_m<-merge(cors_m, full_kegg, by='KO')
#reorder table by correlation size (ascending)
cors_m<-cors_m[order(cors_m$value),]
#define a pallett
pal2<-c("#771155","#114477",  "#117744", "#AAAA44",  "#774411",  "#771122", "#41AB5D", "#252525", "#525252")
pal<-c("#771155", "#CC99BB", "#114477", "#4477AA", "#117777", "#44AAAA", "#77CCCC", "#117744", "#44AA77", "#88CCAA", "#777711", "#AAAA44", "#DDDD77", "#774411", "#AA7744", "#DDAA77", "#771122", "#AA4455", "#DD7788","#41AB5D", "#252525", "#525252", "#737373", "#969696")
ggplot(cors_m, aes(KO, value, color=Level2))+
geom_point(aes(size=2))+
theme_bw()+
coord_flip()+
facet_wrap(~variable)+
scale_color_manual(values=pal)+
geom_hline(yintercept=0, color='black', size=1)+
ylab("Spearman Rho")
ggplot(cors_m, aes(KO, value, color=Level1))+
geom_point(aes(size=2))+
theme_bw()+
coord_flip()+
facet_wrap(~variable)+
scale_color_manual(values=pal)+
geom_hline(yintercept=0, color='black', size=1)+
ylab("Spearman Rho")
ggplot(cors_m, aes(KO, value, color=Level1))+
geom_point(aes(size=2))+
theme_bw()+
coord_flip()+
facet_wrap(~variable)+
#scale_color_manual(values=pal)+
geom_hline(yintercept=0, color='black', size=1)+
ylab("Spearman Rho")
ggplot(cors_m, aes(KO, value, color=Level1))+
geom_point(aes(size=2))+
theme_bw()+
coord_flip()+
facet_wrap(variable+Level1)+
#scale_color_manual(values=pal)+
geom_hline(yintercept=0, color='black', size=1)+
ylab("Spearman Rho")
ggplot(cors_m, aes(KO, value, color=Level1))+
geom_point(aes(size=2))+
theme_bw()+
coord_flip()+
facet_wrap(~variable+Level1)+
#scale_color_manual(values=pal)+
geom_hline(yintercept=0, color='black', size=1)+
ylab("Spearman Rho")
ggplot(cors_m, aes(KO, value, color=Level1))+
geom_point(aes(size=2))+
theme_bw()+
coord_flip()+
facet_wrap(variable~Level1)+
#scale_color_manual(values=pal)+
geom_hline(yintercept=0, color='black', size=1)+
ylab("Spearman Rho")
ggplot(cors_m, aes(KO, value, color=Level3))+
geom_point(aes(size=2))+
theme_bw()+
coord_flip()+
facet_wrap(variable~Level1)+
#scale_color_manual(values=pal)+
geom_hline(yintercept=0, color='black', size=1)+
ylab("Spearman Rho")
ggplot(cors_m, aes(KO, value, color=variable))+
geom_point(aes(size=2))+
theme_bw()+
coord_flip()+
facet_wrap(~Level1)+
#scale_color_manual(values=pal)+
geom_hline(yintercept=0, color='black', size=1)+
ylab("Spearman Rho")
